// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dal.Migrations
{
    [DbContext(typeof(AirportContext))]
    partial class AirportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Common.Models.StationState", b =>
                {
                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FlightId")
                        .HasColumnType("TEXT");

                    b.HasKey("StationId");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("AirportStationsState");
                });

            modelBuilder.Entity("Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LandingDestination")
                        .HasColumnType("TEXT");

                    b.Property<string>("TakeoffDestination")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Models.FlightStationDataToLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EntranceStaionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FromStationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToStationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("FromStationId");

                    b.HasIndex("ToStationId");

                    b.ToTable("FlightStationLogger");
                });

            modelBuilder.Entity("Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("WaitingTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Models.StationsRelation", b =>
                {
                    b.Property<int?>("FromStationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToStationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.HasKey("FromStationId", "ToStationId", "Direction");

                    b.HasIndex("ToStationId");

                    b.ToTable("StationsRelation");
                });

            modelBuilder.Entity("Common.Models.StationState", b =>
                {
                    b.HasOne("Models.Flight", "Flight")
                        .WithOne("StationState")
                        .HasForeignKey("Common.Models.StationState", "FlightId");

                    b.HasOne("Models.Station", "Station")
                        .WithOne("StationState")
                        .HasForeignKey("Common.Models.StationState", "StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Models.FlightStationDataToLog", b =>
                {
                    b.HasOne("Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Station", "FromStation")
                        .WithMany()
                        .HasForeignKey("FromStationId");

                    b.HasOne("Models.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId");

                    b.Navigation("Flight");

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Models.StationsRelation", b =>
                {
                    b.HasOne("Models.Station", "FromStation")
                        .WithMany("StationsRelations")
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Models.Flight", b =>
                {
                    b.Navigation("StationState");
                });

            modelBuilder.Entity("Models.Station", b =>
                {
                    b.Navigation("StationsRelations");

                    b.Navigation("StationState");
                });
#pragma warning restore 612, 618
        }
    }
}
